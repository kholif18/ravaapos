<!-- views/items/index.ejs -->
  <div class="d-flex mb-3 gap-2 justify-content-between align-items-center">
    <h5 class="card-title mb-0 flex-grow-1">Item Lists</h5>
    <button class="btn btn-success" id="btnOpenModalCreate" data-bs-toggle="modal" data-bs-target="#modalCreate">
      + Add Item
    </button>
  </div>
  <div class="card">
    <div class="card-header">
      <form method="GET" action="/items" class="d-flex flex-grow-1 gap-2">
        <select name="category" class="form-select" onchange="this.form.submit()">
          <option value="">All Categories</option>
          <% categories.forEach(cat => { %>
            <option value="<%= cat.id %>" <%= selectedCategory == cat.id ? 'selected' : '' %>><%= cat.name %></option>
          <% }) %>
        </select>
  
        <input type="text" name="q" class="form-control flex-grow-1" placeholder="Search name, code, or barcode..." value="<%= search || '' %>" />
  
        <button type="submit" class="btn btn-primary flex-shrink-0 px-3">
          <i class="bx bx-search"></i> Search
        </button>
  
        <% if (selectedCategory || search) { %>
          <a href="/items" class="btn btn-outline-secondary flex-shrink-0 px-3">
            <i class="bx bx-x"></i> Reset
          </a>
        <% } %>
      </form>
    </div>
    <div class="card-body table-responsive text-nowrap">
      <div id="tableScrollContainer" style="max-height: 70vh; overflow-y: auto;">
        <table id="itemTable" class="table table-hover">
          <thead>
            <tr>
              <th data-sort="code">Code <span class="sort-icon bx"></span></th>
              <th data-sort="name">Name <span class="sort-icon bx"></span></th>
              <th data-sort="category">Category <span class="sort-icon bx"></span></th>
              <th data-sort="barcode">Barcode <span class="sort-icon bx"></span></th>
              <th data-sort="cost">Cost <span class="sort-icon bx"></span></th>
              <th data-sort="salePrice">Sale Price <span class="sort-icon bx"></span></th>
              <th data-sort="unit">Unit <span class="sort-icon bx"></span></th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="itemTableBody" class="table-border-bottom-0"></tbody>
        </table>
        <div id="loadingIndicator" class="text-center text-muted py-3">Loading...</div>
      </div>
    </div>
  </div>

<!-- Modal Tambah Item -->
<div class="modal fade" id="modalCreate" tabindex="-1" aria-labelledby="modalCreateLabel" aria-hidden="true">
  <div class="modal-dialog">
    <form id="formCreateItem" action="/items" method="POST" class="modal-content">
      <div class="modal-header bg-primary">
        <h5 class="modal-title text-white" id="modalCreateLabel">Tambah Item</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Nama -->
        <div class="mb-3">
          <input type="text" name="name" class="form-control" placeholder="Nama item" required>
        </div>

        <!-- Kode & Barcode -->
        <div class="mb-3">
          <input type="text" name="code" class="form-control" placeholder="Kode item" required>
        </div>
        <div class="mb-3">
          <input type="text" name="barcode" class="form-control" placeholder="Barcode (opsional)">
        </div>

        <!-- Unit & Category -->
        <div class="mb-3">
          <input type="text" name="unit" class="form-control" placeholder="Unit (mis. pcs, pkg)" required>
        </div>
        <div class="mb-3">
          <select name="categoryId" class="form-select">
            <option value="">Pilih Kategori</option>
            <% categories.forEach(cat => { %>
              <option value="<%= cat.id %>"><%= cat.name %></option>
            <% }) %>
          </select>
        </div>

        <!-- Default Qty & Service -->
        <div class="form-check form-switch mb-3">
          <input class="form-check-input" type="checkbox" name="defaultQtyOne" id="defaultQtyOne" checked>
          <label class="form-check-label" for="defaultQtyOne">Default Qty = 1</label>
        </div>
        <div class="form-check form-switch mb-3">
          <input class="form-check-input" type="checkbox" name="isService" id="isService">
          <label class="form-check-label" for="isService">Jasa (tidak menggunakan stok)</label>
        </div>

        <!-- Cost, Markup, Sale Price -->
        <div class="row">
          <div class="col-md-4 mb-3">
            <label>Harga Beli (Cost)</label>
            <input type="number" step="0.01" name="cost" id="inputCost" class="form-control" required>
          </div>
          <div class="col-md-4 mb-3">
            <label>Markup (%)</label>
            <input type="number" step="0.01" name="markup" id="inputMarkup" class="form-control" required>
          </div>
          <div class="col-md-4 mb-3">
            <label>Harga Jual</label>
            <input type="number" step="0.01" name="salePrice" id="inputSalePrice" class="form-control" required>
          </div>
        </div>

        <!-- Price Change Allowed -->
        <div class="form-check form-switch mb-3">
          <input class="form-check-input" type="checkbox" name="priceChangeAllowed" id="priceChangeAllowed">
          <label class="form-check-label" for="priceChangeAllowed">Harga bisa diubah saat penjualan</label>
        </div>
      </div>

      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Simpan</button>
      </div>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    function sortTableBy(column, ascending = true) {
      const tbody = document.getElementById('itemTableBody');
      const rows = Array.from(tbody.querySelectorAll('tr'));

      rows.sort((a, b) => {
        const aCell = a.querySelector(`td[data-column="${column}"]`);
        const bCell = b.querySelector(`td[data-column="${column}"]`);

        let aVal = aCell?.dataset.value || aCell?.textContent?.trim() || '';
        let bVal = bCell?.dataset.value || bCell?.textContent?.trim() || '';

        // Coba ubah ke angka
        const aNum = parseFloat(aVal);
        const bNum = parseFloat(bVal);

        if (!isNaN(aNum) && !isNaN(bNum)) {
          return ascending ? aNum - bNum : bNum - aNum;
        }

        return ascending ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
      });

      tbody.innerHTML = '';
      rows.forEach(row => tbody.appendChild(row));
    }


    function updateSortIcons(column, ascending) {
      document.querySelectorAll('.sort-icon').forEach(icon => {
        icon.className = 'sort-icon bx';
      });

      const iconEl = document.querySelector(`th[data-sort="${column}"] .sort-icon`);
      if (iconEl) {
        iconEl.classList.add(ascending ? 'bx-sort-down' : 'bx-sort-up');
      }
    }

    const headers = document.querySelectorAll('#itemTable thead th[data-sort]');
    let currentSort = { column: null, ascending: true };

    headers.forEach(header => {
      header.addEventListener('click', () => {
        const column = header.dataset.sort;
        const ascending = (currentSort.column === column) ? !currentSort.ascending : true;
        currentSort = { column, ascending };
        sortTableBy(column, ascending);
        updateSortIcons(column, ascending);
      });
    });

    let offset = 0;
    const limit = 25;
    let loading = false;
    let done = false;

    function formatRupiah(num) {
      return 'Rp ' + Number(num).toLocaleString('id-ID');
    }

    async function loadMoreItems() {
      if (loading || done) return;
      loading = true;
      document.getElementById('loadingIndicator').textContent = 'Loading...';

      const params = new URLSearchParams(window.location.search);
      const category = params.get('category') || '';
      const search = params.get('q') || '';

      const res = await fetch(`/items/json?offset=${offset}&limit=${limit}&category=${category}&q=${search}`);

      if (!res.ok) return;
      const items = await res.json();

      if (items.length < limit) done = true;
      offset += items.length;

      const tbody = document.getElementById('itemTableBody');
      for (const item of items) {
        const row = document.createElement('tr');
        row.dataset.id = item.id;
        row.dataset.name = item.name;
        row.dataset.price = item.price;
        row.dataset.category = item.categoryId;

        row.innerHTML = `
          <td data-column="code">${item.code}</td>
          <td data-column="name">${item.name}</td>
          <td data-column="category">${item.category?.name || '-'}</td>
          <td data-column="barcode">${item.barcode || '-'}</td>
          <td data-column="cost" data-value="${item.cost}">${formatRupiah(item.cost)}</td>
          <td data-column="salePrice" data-value="${item.salePrice}">${formatRupiah(item.salePrice)}</td>
          <td data-column="unit">${item.unit}</td>
          <td>
            <button class="btn btn-sm btn-warning btn-edit" data-bs-toggle="modal" data-bs-target="#modalEdit"><i class="bx bx-pencil"></i></button>
            <button class="btn btn-sm btn-danger btn-delete"><i class="bx bx-trash"></i></button>
          </td>`;
        tbody.appendChild(row);
      }

      document.getElementById('loadingIndicator').textContent = done ? 'Semua item dimuat' : '';
      loading = false;
    }

    // Infinite scroll
    document.getElementById('tableScrollContainer').addEventListener('scroll', () => {
      const container = document.getElementById('tableScrollContainer');
      if (container.scrollTop + container.clientHeight >= container.scrollHeight - 10) {
        loadMoreItems();
      }
    });

    loadMoreItems();

    // AJAX untuk kalkulasi harga jual dua arah
    const inputCost = document.getElementById('inputCost');
    const inputMarkup = document.getElementById('inputMarkup');
    const inputSalePrice = document.getElementById('inputSalePrice');

    let lastChanged = null; // untuk menghindari loop tak berujung

    function updateSalePrice() {
      if (lastChanged === 'sale') return; // hindari loop
      const cost = parseFloat(inputCost.value) || 0;
      const markup = parseFloat(inputMarkup.value) || 0;
      const sale = cost + (cost * markup / 100);
      lastChanged = 'markup';
      inputSalePrice.value = Number.isInteger(sale) ? sale : sale.toFixed(2);
    }

    function updateMarkup() {
      if (lastChanged === 'markup') return; // hindari loop
      const cost = parseFloat(inputCost.value) || 0;
      const sale = parseFloat(inputSalePrice.value) || 0;
      if (cost === 0) return; // hindari pembagian nol
      const markup = ((sale - cost) / cost) * 100;
      lastChanged = 'sale';
      inputMarkup.value = Number.isInteger(markup) ? markup : markup.toFixed(2);
    }

    inputCost.addEventListener('input', () => {
      lastChanged = null;
      updateSalePrice();
    });

    inputMarkup.addEventListener('input', () => {
      lastChanged = null;
      updateSalePrice();
    });

    inputSalePrice.addEventListener('input', () => {
      lastChanged = null;
      updateMarkup();
    });

    const formCreate = document.getElementById('formCreateItem');
    formCreate.addEventListener('submit', async function (e) {
      e.preventDefault();

      const formData = new FormData(this);
      const data = Object.fromEntries(formData.entries());

      // Convert checkbox ke boolean
      data.defaultQty = formData.get('defaultQtyOne') === 'on';
      data.service = formData.get('isService') === 'on';
      data.priceChangeAllowed = formData.get('priceChangeAllowed') === 'on';

      try {
        const res = await fetch('/items', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });

        if (!res.ok) throw new Error('Gagal menambah item');

        // Tutup modal dan reload tabel
        bootstrap.Modal.getInstance(document.getElementById('modalCreate')).hide();
        offset = 0;
        done = false;
        document.getElementById('itemTableBody').innerHTML = '';
        await loadMoreItems();

        showToast({
          type: 'success',
          title: 'Berhasil',
          message: 'Item berhasil ditambahkan'
        });

      } catch (err) {
        showToast({
          type: 'danger',
          title: 'Gagal',
          message: err.message || 'Terjadi kesalahan'
        });

      }
    });

    document.getElementById('modalCreate').addEventListener('show.bs.modal', () => {
      const form = document.getElementById('formCreateItem');
      form.reset();

      // Reset nilai default manual
      document.getElementById('defaultQtyOne').checked = true;
      document.getElementById('isService').checked = false;
      document.getElementById('priceChangeAllowed').checked = false;

      // Kosongkan juga perhitungan harga jika perlu
      inputCost.value = '';
      inputMarkup.value = '';
      inputSalePrice.value = '';
    });


    function showToast({ title = 'Info', message = '', type = 'info', delay = 3000 }) {
      const container = document.getElementById('toastContainer');
      const template = document.getElementById('baseToastTemplate');

      if (!container || !template) return;

      const clone = template.firstElementChild.cloneNode(true);
      clone.classList.remove('d-none');
      clone.classList.add('show', `bg-${type}`);

      const iconMap = {
        success: 'bx-check-circle',
        danger: 'bx-x-circle',
        warning: 'bx-error-alt',
        info: 'bx-info-circle'
      };

      const icon = iconMap[type] || 'bx-bell';
      clone.querySelector('.toast-icon').classList.add(icon);
      clone.querySelector('.toast-title').textContent = title;
      clone.querySelector('.toast-body').textContent = message;
      clone.querySelector('.toast-time').textContent = 'Baru saja';

      container.appendChild(clone);

      const bsToast = new bootstrap.Toast(clone, { delay });
      bsToast.show();

      clone.addEventListener('hidden.bs.toast', () => {
        clone.remove();
      });
    }

    document.getElementById('itemTableBody').addEventListener('click', async function (e) {
      const btn = e.target.closest('.btn-delete');
      if (!btn) return;

      const row = btn.closest('tr');
      const itemId = row.dataset.id;

      const confirm = await Swal.fire({
        title: 'Hapus item ini?',
        text: "Tindakan ini tidak bisa dibatalkan.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Ya, hapus',
        cancelButtonText: 'Batal',
        confirmButtonColor: '#696cff',
        cancelButtonColor: '#6c757d'
      });

      if (!confirm.isConfirmed) return;

      try {
        const res = await fetch(`/items/${itemId}/delete`, {
          method: 'POST'
        });

        if (!res.ok) throw new Error('Gagal menghapus item');

        row.remove();

        Swal.fire({
          icon: 'success',
          title: 'Item berhasil dihapus',
          timer: 1500,
          showConfirmButton: false,
        });
      } catch (err) {
        Swal.fire({
          icon: 'error',
          title: 'Gagal menghapus item',
          text: err.message,
          timer: 2000,
          showConfirmButton: false,
        });
      }
    });
  });
</script>